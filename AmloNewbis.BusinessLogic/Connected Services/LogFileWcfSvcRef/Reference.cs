//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LogFileWcfSvcRef
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessResult", Namespace="http://schemas.datacontract.org/2004/07/ITUtility")]
    public partial class ProcessResult : object
    {
        
        private string ErrorMessageField;
        
        private bool SuccessedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage
        {
            get
            {
                return this.ErrorMessageField;
            }
            set
            {
                this.ErrorMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Successed
        {
            get
            {
                return this.SuccessedField;
            }
            set
            {
                this.SuccessedField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service1.LogType", Namespace="http://schemas.datacontract.org/2004/07/LogFileWcfSvc")]
    public enum Service1LogType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Info = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Debug = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LogFileWcfSvcRef.IService1")]
    public interface IService1
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteLog", ReplyAction="http://tempuri.org/IService1/WriteLogResponse")]
        LogFileWcfSvcRef.ProcessResult WriteLog(string System_Name, string Msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteLog", ReplyAction="http://tempuri.org/IService1/WriteLogResponse")]
        System.Threading.Tasks.Task<LogFileWcfSvcRef.ProcessResult> WriteLogAsync(string System_Name, string Msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteLog_MultiLine", ReplyAction="http://tempuri.org/IService1/WriteLog_MultiLineResponse")]
        LogFileWcfSvcRef.ProcessResult WriteLog_MultiLine(string System_Name, string[] Msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteLog_MultiLine", ReplyAction="http://tempuri.org/IService1/WriteLog_MultiLineResponse")]
        System.Threading.Tasks.Task<LogFileWcfSvcRef.ProcessResult> WriteLog_MultiLineAsync(string System_Name, string[] Msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteLog_MultiLine_To_Network_Path", ReplyAction="http://tempuri.org/IService1/WriteLog_MultiLine_To_Network_PathResponse")]
        LogFileWcfSvcRef.ProcessResult WriteLog_MultiLine_To_Network_Path(string Path, string Table_Name, string[] Msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteLog_MultiLine_To_Network_Path", ReplyAction="http://tempuri.org/IService1/WriteLog_MultiLine_To_Network_PathResponse")]
        System.Threading.Tasks.Task<LogFileWcfSvcRef.ProcessResult> WriteLog_MultiLine_To_Network_PathAsync(string Path, string Table_Name, string[] Msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteLogSingleFile", ReplyAction="http://tempuri.org/IService1/WriteLogSingleFileResponse")]
        LogFileWcfSvcRef.ProcessResult WriteLogSingleFile(string System_Name, string[] Msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteLogSingleFile", ReplyAction="http://tempuri.org/IService1/WriteLogSingleFileResponse")]
        System.Threading.Tasks.Task<LogFileWcfSvcRef.ProcessResult> WriteLogSingleFileAsync(string System_Name, string[] Msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteLogSingleFileNotClose", ReplyAction="http://tempuri.org/IService1/WriteLogSingleFileNotCloseResponse")]
        LogFileWcfSvcRef.ProcessResult WriteLogSingleFileNotClose(string System_Name, LogFileWcfSvcRef.Service1LogType logType, string[] Msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteLogSingleFileNotClose", ReplyAction="http://tempuri.org/IService1/WriteLogSingleFileNotCloseResponse")]
        System.Threading.Tasks.Task<LogFileWcfSvcRef.ProcessResult> WriteLogSingleFileNotCloseAsync(string System_Name, LogFileWcfSvcRef.Service1LogType logType, string[] Msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public interface IService1Channel : LogFileWcfSvcRef.IService1, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public partial class Service1Client : System.ServiceModel.ClientBase<LogFileWcfSvcRef.IService1>, LogFileWcfSvcRef.IService1
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Service1Client() : 
                base(Service1Client.GetDefaultBinding(), Service1Client.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService1.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), Service1Client.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public LogFileWcfSvcRef.ProcessResult WriteLog(string System_Name, string Msg)
        {
            return base.Channel.WriteLog(System_Name, Msg);
        }
        
        public System.Threading.Tasks.Task<LogFileWcfSvcRef.ProcessResult> WriteLogAsync(string System_Name, string Msg)
        {
            return base.Channel.WriteLogAsync(System_Name, Msg);
        }
        
        public LogFileWcfSvcRef.ProcessResult WriteLog_MultiLine(string System_Name, string[] Msg)
        {
            return base.Channel.WriteLog_MultiLine(System_Name, Msg);
        }
        
        public System.Threading.Tasks.Task<LogFileWcfSvcRef.ProcessResult> WriteLog_MultiLineAsync(string System_Name, string[] Msg)
        {
            return base.Channel.WriteLog_MultiLineAsync(System_Name, Msg);
        }
        
        public LogFileWcfSvcRef.ProcessResult WriteLog_MultiLine_To_Network_Path(string Path, string Table_Name, string[] Msg)
        {
            return base.Channel.WriteLog_MultiLine_To_Network_Path(Path, Table_Name, Msg);
        }
        
        public System.Threading.Tasks.Task<LogFileWcfSvcRef.ProcessResult> WriteLog_MultiLine_To_Network_PathAsync(string Path, string Table_Name, string[] Msg)
        {
            return base.Channel.WriteLog_MultiLine_To_Network_PathAsync(Path, Table_Name, Msg);
        }
        
        public LogFileWcfSvcRef.ProcessResult WriteLogSingleFile(string System_Name, string[] Msg)
        {
            return base.Channel.WriteLogSingleFile(System_Name, Msg);
        }
        
        public System.Threading.Tasks.Task<LogFileWcfSvcRef.ProcessResult> WriteLogSingleFileAsync(string System_Name, string[] Msg)
        {
            return base.Channel.WriteLogSingleFileAsync(System_Name, Msg);
        }
        
        public LogFileWcfSvcRef.ProcessResult WriteLogSingleFileNotClose(string System_Name, LogFileWcfSvcRef.Service1LogType logType, string[] Msg)
        {
            return base.Channel.WriteLogSingleFileNotClose(System_Name, logType, Msg);
        }
        
        public System.Threading.Tasks.Task<LogFileWcfSvcRef.ProcessResult> WriteLogSingleFileNotCloseAsync(string System_Name, LogFileWcfSvcRef.Service1LogType logType, string[] Msg)
        {
            return base.Channel.WriteLogSingleFileNotCloseAsync(System_Name, logType, Msg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1))
            {
                return new System.ServiceModel.EndpointAddress("http://intranettest.bla.co.th:88/LogFileWcfSvc/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return Service1Client.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return Service1Client.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IService1,
        }
    }
}
